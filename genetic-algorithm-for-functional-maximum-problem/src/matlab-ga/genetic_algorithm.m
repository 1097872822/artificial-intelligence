% Genetic Algorithm for Functional Maximum Problem
% f(x) = x+10*sin(5*x)+7*cos(4*x), x???[0,9]
% Created by Shengjia Yan @2016/4/26

% population_size: ??????????????????
% chromosome_size: ?????????????????????
% generation_size: ??????????????????
% cross_rate: ??????????????????
% mutate_rate: ??????????????????
% elitism: ????????????????????????
% m: ??????????????????
% n: ?????????????????????
% p: ????????????????????????????????????
% q: ??????????????????????????????
function [m,n,p,q] = genetic_algorithm(population_size, chromosome_size, generation_size, cross_rate, mutate_rate, elitism)

global G ;              % ??????????????????
global fitness_value;   % ????????????????????????
global best_fitness;    % ?????????????????????
global fitness_average; % ???????????????????????????
global best_individual; % ??????????????????
global best_generation; % ?????????????????????
upper_bound = 9;        % ????????????????????????
lower_bound = 0;        % ????????????????????????

fitness_average = zeros(generation_size, 1); % ??? generation_size*1 ?????????????????? fitness_average

disp [ysj genetic algorithm]

fitness_value(population_size) = 0.;
best_fitness = 0.;
best_generation = 0;

init(population_size, chromosome_size); % ?????????

for G=1:generation_size   
    fitness(population_size, chromosome_size);                % ??????????????? 
    rank(population_size, chromosome_size);                   % ???????????????????????????????????????
    selection(population_size, chromosome_size, elitism);     % ????????????
    crossover(population_size, chromosome_size, cross_rate);  % ????????????
    mutation(population_size, chromosome_size, mutate_rate);  % ????????????
end

plotGA(generation_size);% ????????????????????????

m = best_individual;    % ??????????????????
n = best_fitness;       % ?????????????????????
p = best_generation;    % ??????????????????????????????????????????

% ???????????????????????????????????????????????????????????????????????????
q = 0.;
for j=1:chromosome_size
    if best_individual(j) == 1
            q = q+2^(j-1);  % ???????????????????????????????????????
    end 
end
q = lower_bound + q*(upper_bound-lower_bound)/(2^chromosome_size-1); % ??????

clear i;
clear j;


